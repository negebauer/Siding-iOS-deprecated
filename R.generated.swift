// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generateted, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CourseCell`.
    static let courseCell: ReuseIdentifier<CourseCell> = ReuseIdentifier(identifier: "CourseCell")
    /// Reuse identifier `CourseDataCell`.
    static let courseDataCell: ReuseIdentifier<CourseDataCell> = ReuseIdentifier(identifier: "CourseDataCell")
    /// Reuse identifier `CourseFileCell`.
    static let courseFileCell: ReuseIdentifier<CourseDataCell> = ReuseIdentifier(identifier: "CourseFileCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `CourseViewController`, and contains static references to 1 segues.
    struct courseViewController {
      /// Segue identifier `showCourseFolder`.
      static let showCourseFolder: StoryboardSegueIdentifier<UIStoryboardSegue, CourseViewController, CourseFolderViewController> = StoryboardSegueIdentifier(identifier: "showCourseFolder")
      
      /// Optionally returns a typed version of segue `showCourseFolder`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCourseFolder(segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, CourseViewController, CourseFolderViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.courseViewController.showCourseFolder, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SidingViewController`, and contains static references to 2 segues.
    struct sidingViewController {
      /// Segue identifier `ShowAppInfo`.
      static let showAppInfo: StoryboardSegueIdentifier<UIStoryboardSegue, SidingViewController, InfoTableViewController> = StoryboardSegueIdentifier(identifier: "ShowAppInfo")
      /// Segue identifier `showCourse`.
      static let showCourse: StoryboardSegueIdentifier<UIStoryboardSegue, SidingViewController, CourseViewController> = StoryboardSegueIdentifier(identifier: "showCourse")
      
      /// Optionally returns a typed version of segue `ShowAppInfo`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAppInfo(segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, SidingViewController, InfoTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.sidingViewController.showAppInfo, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showCourse`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCourse(segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, SidingViewController, CourseViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.sidingViewController.showCourse, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static let hostingBundle = Bundle(identifier: "com.negebauer.Siding") ?? Bundle.main
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let courseFolderDetail = StoryboardViewControllerResource<CourseFolderViewController>(identifier: "courseFolderDetail")
      let name = "Main"
      
      func courseFolderDetail(_: Void) -> CourseFolderViewController? {
        return UIStoryboard(resource: self).instantiateViewController(courseFolderDetail)
      }
      
      static func validate() throws {
        if _R.storyboard.main().courseFolderDetail() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'courseFolderDetail' could not be loaded from storyboard 'Main' as 'CourseFolderViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
